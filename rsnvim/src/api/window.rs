use rmpv::Value;

use crate::api::*;
use crate::error::Error;
use crate::value_vec;

/// The below implementations are autogenerated using the Neovim API
impl Window {
    /// Since: 6
    pub fn set_config(&mut self, config: Vec<(Value, Value)>) -> Result<Value, Error> {
        self.session.call("nvim_win_set_config", value_vec!(config))
    }

    /// Since: 6
    pub fn get_config(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_config", Vec::new())
    }

    /// Since: 1
    pub fn get_buf(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_buf", Vec::new())
    }

    /// Since: 5
    pub fn set_buf(&mut self, buffer: Buffer) -> Result<Value, Error> {
        self.session.call("nvim_win_set_buf", value_vec!(buffer))
    }

    /// Since: 1
    pub fn get_cursor(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_cursor", Vec::new())
    }

    /// Since: 1
    pub fn set_cursor(&mut self, pos: (i64, i64)) -> Result<Value, Error> {
        self.session.call("nvim_win_set_cursor", value_vec!(pos))
    }

    /// Since: 1
    pub fn get_height(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_height", Vec::new())
    }

    /// Since: 1
    pub fn set_height(&mut self, height: i64) -> Result<Value, Error> {
        self.session.call("nvim_win_set_height", value_vec!(height))
    }

    /// Since: 1
    pub fn get_width(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_width", Vec::new())
    }

    /// Since: 1
    pub fn set_width(&mut self, width: i64) -> Result<Value, Error> {
        self.session.call("nvim_win_set_width", value_vec!(width))
    }

    /// Since: 1
    pub fn get_var(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_win_get_var", value_vec!(name))
    }

    /// Since: 1
    pub fn set_var(&mut self, name: String, value: Value) -> Result<Value, Error> {
        self.session
            .call("nvim_win_set_var", value_vec!(name, value))
    }

    /// Since: 1
    pub fn del_var(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_win_del_var", value_vec!(name))
    }

    /// Since: 1
    pub fn get_position(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_position", Vec::new())
    }

    /// Since: 1
    pub fn get_tabpage(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_tabpage", Vec::new())
    }

    /// Since: 1
    pub fn get_number(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_get_number", Vec::new())
    }

    /// Since: 1
    pub fn is_valid(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_is_valid", Vec::new())
    }

    /// Since: 7
    pub fn hide(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_win_hide", Vec::new())
    }

    /// Since: 6
    pub fn close(&mut self, force: bool) -> Result<Value, Error> {
        self.session.call("nvim_win_close", value_vec!(force))
    }

    /// Since: 7
    pub fn call(&mut self, fun: Value) -> Result<Value, Error> {
        self.session.call("nvim_win_call", value_vec!(fun))
    }

    /// Since: 10
    pub fn set_hl_ns(&mut self, ns_id: i64) -> Result<Value, Error> {
        self.session.call("nvim_win_set_hl_ns", value_vec!(ns_id))
    }

    /// Since: 12
    pub fn text_height(&mut self, opts: Vec<(Value, Value)>) -> Result<Value, Error> {
        self.session.call("nvim_win_text_height", value_vec!(opts))
    }
}
