use rmpv::Value;

use crate::api::*;
use crate::error::Error;
use crate::value_vec;

/// The below implementations are autogenerated using the Neovim API
impl Buffer {
    /// Since: 1
    pub fn line_count(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_line_count", Vec::new())
    }

    /// Since: 4
    pub fn attach(&mut self, send_buffer: bool, opts: Vec<(Value, Value)>) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_attach", value_vec!(send_buffer, opts))
    }

    /// Since: 4
    pub fn detach(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_detach", Vec::new())
    }

    /// Since: 1
    pub fn get_lines(
        &mut self,
        start: i64,
        end: i64,
        strict_indexing: bool,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_get_lines",
            value_vec!(start, end, strict_indexing),
        )
    }

    /// Since: 1
    pub fn set_lines(
        &mut self,
        start: i64,
        end: i64,
        strict_indexing: bool,
        replacement: Vec<String>,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_set_lines",
            value_vec!(start, end, strict_indexing, replacement),
        )
    }

    /// Since: 7
    pub fn set_text(
        &mut self,
        start_row: i64,
        start_col: i64,
        end_row: i64,
        end_col: i64,
        replacement: Vec<String>,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_set_text",
            value_vec!(start_row, start_col, end_row, end_col, replacement),
        )
    }

    /// Since: 9
    pub fn get_text(
        &mut self,
        start_row: i64,
        start_col: i64,
        end_row: i64,
        end_col: i64,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_get_text",
            value_vec!(start_row, start_col, end_row, end_col, opts),
        )
    }

    /// Since: 5
    pub fn get_offset(&mut self, index: i64) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_offset", value_vec!(index))
    }

    /// Since: 1
    pub fn get_var(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_var", value_vec!(name))
    }

    /// Since: 2
    pub fn get_changedtick(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_changedtick", Vec::new())
    }

    /// Since: 3
    pub fn get_keymap(&mut self, mode: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_keymap", value_vec!(mode))
    }

    /// Since: 6
    pub fn set_keymap(
        &mut self,
        mode: String,
        lhs: String,
        rhs: String,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_set_keymap", value_vec!(mode, lhs, rhs, opts))
    }

    /// Since: 6
    pub fn del_keymap(&mut self, mode: String, lhs: String) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_del_keymap", value_vec!(mode, lhs))
    }

    /// Since: 1
    pub fn set_var(&mut self, name: String, value: Value) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_set_var", value_vec!(name, value))
    }

    /// Since: 1
    pub fn del_var(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_del_var", value_vec!(name))
    }

    /// Since: 1
    pub fn get_name(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_name", Vec::new())
    }

    /// Since: 1
    pub fn set_name(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_set_name", value_vec!(name))
    }

    /// Since: 5
    pub fn is_loaded(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_is_loaded", Vec::new())
    }

    /// Since: 7
    pub fn delete(&mut self, opts: Vec<(Value, Value)>) -> Result<Value, Error> {
        self.session.call("nvim_buf_delete", value_vec!(opts))
    }

    /// Since: 1
    pub fn is_valid(&mut self) -> Result<Value, Error> {
        self.session.call("nvim_buf_is_valid", Vec::new())
    }

    /// Since: 8
    pub fn del_mark(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_del_mark", value_vec!(name))
    }

    /// Since: 8
    pub fn set_mark(
        &mut self,
        name: String,
        line: i64,
        col: i64,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_set_mark", value_vec!(name, line, col, opts))
    }

    /// Since: 1
    pub fn get_mark(&mut self, name: String) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_mark", value_vec!(name))
    }

    /// Since: 7
    pub fn call(&mut self, fun: Value) -> Result<Value, Error> {
        self.session.call("nvim_buf_call", value_vec!(fun))
    }

    /// Since: 9
    pub fn create_user_command(
        &mut self,
        name: String,
        command: Value,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_create_user_command",
            value_vec!(name, command, opts),
        )
    }

    /// Since: 9
    pub fn del_user_command(&mut self, name: String) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_del_user_command", value_vec!(name))
    }

    /// Since: 4
    pub fn get_commands(&mut self, opts: Vec<(Value, Value)>) -> Result<Value, Error> {
        self.session.call("nvim_buf_get_commands", value_vec!(opts))
    }

    /// Since: 7
    pub fn get_extmark_by_id(
        &mut self,
        ns_id: i64,
        id: i64,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_get_extmark_by_id", value_vec!(ns_id, id, opts))
    }

    /// Since: 7
    pub fn get_extmarks(
        &mut self,
        ns_id: i64,
        start: Value,
        end: Value,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_get_extmarks", value_vec!(ns_id, start, end, opts))
    }

    /// Since: 7
    pub fn set_extmark(
        &mut self,
        ns_id: i64,
        line: i64,
        col: i64,
        opts: Vec<(Value, Value)>,
    ) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_set_extmark", value_vec!(ns_id, line, col, opts))
    }

    /// Since: 7
    pub fn del_extmark(&mut self, ns_id: i64, id: i64) -> Result<Value, Error> {
        self.session
            .call("nvim_buf_del_extmark", value_vec!(ns_id, id))
    }

    /// Since: 1
    pub fn add_highlight(
        &mut self,
        ns_id: i64,
        hl_group: String,
        line: i64,
        col_start: i64,
        col_end: i64,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_add_highlight",
            value_vec!(ns_id, hl_group, line, col_start, col_end),
        )
    }

    /// Since: 5
    pub fn clear_namespace(
        &mut self,
        ns_id: i64,
        line_start: i64,
        line_end: i64,
    ) -> Result<Value, Error> {
        self.session.call(
            "nvim_buf_clear_namespace",
            value_vec!(ns_id, line_start, line_end),
        )
    }
}
