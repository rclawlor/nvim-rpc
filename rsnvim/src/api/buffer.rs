use rmpv::Value;

use crate::api::*;
use crate::error::Error;
use crate::value_vec;

/// The below implementations are autogenerated using the Neovim API
impl Buffer {
    /// Since: 1
    pub fn line_count(&mut self) -> Result<i64, Error> {
        let ret = self.session
            .call("nvim_buf_line_count", value_vec!(self.data))?;
        Ok(ret.as_i64().unwrap())
    }

    /// Since: 4
    pub fn attach(&mut self, send_buffer: bool, opts: Vec<(Value, Value)>) -> Result<bool, Error> {
        let ret = self.session
            .call("nvim_buf_attach", value_vec!(self.data, send_buffer, opts))?;
        Ok(ret.as_bool().unwrap())
    }

    /// Since: 4
    pub fn detach(&mut self) -> Result<bool, Error> {
        let ret = self.session.call("nvim_buf_detach", value_vec!(self.data))?;
        Ok(ret.as_bool().unwrap())
    }

    /// Since: 1
    pub fn get_lines(
        &mut self,
        start: i64,
        end: i64,
        strict_indexing: bool,
    ) -> Result<Vec<String>, Error> {
        let ret = self.session.call(
            "nvim_buf_get_lines",
            value_vec!(self.data, start, end, strict_indexing),
        )?;
        Ok(ret.as_array().unwrap().iter().map(|x| x.as_str().unwrap().to_string()).collect())
    }
}
